###### *由问题引出知识点*：*体现动态规划比较典型的问题就是爬楼梯和零钱兑换*



#### leetcode322：零钱兑换

```javascript
var changeCoins = function(coins,amount){
    let dp = new Array(amount + 1).fill(Infinity);
    dp[0] = 0;
    for(let i = 0; i <= amount; i++){
        //每一层的最优子结构
        for(coin of coins){
            if(i >= coin){
                dp[i] = Math.min(dp[i],dp[i-coin]+1);
            }
        }
    }
    return dp[amount] = Infinity ? -1 : dp[amount];
}
```



### leetcode70:爬楼梯

#### 方法一：动态规划（递归+记忆化）O(n) O(n)

```javascript
var climbStairs = function(n){
    if(n<=2) return n;
    let dp = [];
    dp[1] = 1;
    dp[2] = 2;
    for(let i = 3;i <= n;i++){
        dp[i] = dp[i-1] + dp[i-2];
    }
    return dp[n];
}
```



#### 动态规划：尝试分解子问题（注意：以下开始都是引用的leetcode上某位同学的说法，个人觉得非常的简单易懂）

- 在研究了好几天，看了大佬们无数的解题思想之后，我终于明白了动态规划的本质，其实理解
  一个算法的思想，有很多时候只差临门一脚，希望我的题解能帮助到大家。

- 我们经常听到「最优子结构」「缩小问题规模」「自顶向下」「自底向上」等跟动态规划
  相关的词汇。

- 接下来就彻底搞懂这种思想，顺带着我自己也重温一遍刚刚搞懂的喜悦。

----------------开始解题，拿实例来说话----------------------

- 假设给出的不同面额的硬币是[1, 2, 5]，目标是 120，问最少需要的硬币个数？

- 我们要分解子问题，分层级找最优子结构，看到这又要晕了哈，憋急~~ 下面马上举例。

- 这里我们使用「自顶向下」思想来考虑这个题目，然后用「自底向上」的方法来解题，
  体验算法的冰火两重天。

- dp[i]: 表示总金额为 i 的时候最优解法的硬币数

- 我们想一下：求总金额 120 有几种方法？下面这个思路关键了 !!!
  一共有 3 种方式，因为我们有 3 种不同面值的硬币。
  1.拿一枚面值为 1 的硬币 + 总金额为 119 的最优解法的硬币数量
    这里我们只需要假设总金额为 119 的最优解法的硬币数有人已经帮我们算好了，
    不需要纠结于此。(虽然一会也是我们自己算，哈哈)
    即：dp[119] + 1
  2.拿一枚面值为 2 的硬币 + 总金额为 118 的最优解法的硬币数
    这里我们只需要假设总金额为 118 的最优解法的硬币数有人已经帮我们算好了
    即：dp[118] + 1
  3.拿一枚面值为 5 的硬币 + 总金额为 115 的最优解法的硬币数
    这里我们只需要假设总金额为 115 的最优解法的硬币数有人已经帮我们算好了
    即：dp[115] + 1

  - 所以，总金额为 120 的最优解法就是上面这三种解法中最优的一种，也就是硬币数最少
    的一种，我们下面试着用代码来表示一下：

  - dp[120] = Math.min(dp[119] + 1, dp[118] + 1, dp[115] + 1);

  - 推导出「状态转移方程」：
    dp[i] = Math.min(dp[i - coin] + 1, dp[i - coin] + 1, ...)
    其中 coin 有多少种可能，我们就需要比较多少次，那么我们到底需要比较多少次呢？
    当然是 coins 数组中有几种不同面值的硬币，就是多少次了~ 遍历 coins 数组，
    分别去对比即可

  - 上面方程中的 dp[119]，dp[118]，dp[115] 我们继续用这种思想去分解，
    这就是动态规划了，把这种思想，思考问题的方式理解了，这一类型的题目
    问题都不会太大。

    



###### *看完上面这位仁兄的解释之后是不是觉得瞬间从刚会走路的婴儿成为了学会凌波微步的段誉，不要着急，既然都讲到了这里就顺便看看爬楼梯的其他解法吧*



#### 爬楼梯方法二：数学（斐波那契数列）O(logn)

![](C:\Users\Think\Desktop\动态规划\斐波那契数列.png)

```javascript
var climbStairs = function(n){
    const sqrt5 = Math.sqrt(5);
    let fib = Math.pow((1+sqrt5)/2,n+1) - Math.pow((1-sqrt5)/2,n+1)
    return Math.round(fib/sqrt5);
}
```



#### 爬楼梯方法三：求第i个斐波那契数（维护三个数）O(n) O(1)

```javascript
var climbStairs = function(n){
    if(n <= 3) return n;
    let f1 = 2;
    let f2 = 3;
    let f3 = 0;
    while(n > 3){
        f3 = f1 + f2;
        f1 = f2;
        f2 = f3;
        n--;
    }
    return f2;
}
```
